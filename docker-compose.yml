services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dashboard-finance-postgres
    environment:
      POSTGRES_DB: dashboard_finance
      POSTGRES_USER: dashboard_user
      POSTGRES_PASSWORD: dashboard_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d dashboard_finance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and caching
  redis:
    image: redis:7-alpine
    container_name: dashboard-finance-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dashboard-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Application
  app:
    build:
      context: .
      dockerfile: docker/development/Dockerfile
    container_name: dashboard-finance-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://dashboard_user:dashboard_password@postgres:5432/dashboard_finance
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
      - ENVIRONMENT=development
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/.pytest_cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: docker/development/Dockerfile
    container_name: dashboard-finance-celery-worker
    environment:
      - DATABASE_URL=postgresql://dashboard_user:dashboard_password@postgres:5432/dashboard_finance
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
      - ENVIRONMENT=development
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    command: celery -A celery_app worker --loglevel=info --concurrency=2

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: docker/development/Dockerfile
    container_name: dashboard-finance-celery-beat
    environment:
      - DATABASE_URL=postgresql://dashboard_user:dashboard_password@postgres:5432/dashboard_finance
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
      - ENVIRONMENT=development
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    command: celery -A celery_app beat --loglevel=info

  # Celery Flower for monitoring
  celery-flower:
    image: mher/flower:latest
    container_name: dashboard-finance-celery-flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - FLOWER_BASIC_AUTH=admin:admin
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - dashboard-network
    command: celery flower --broker=redis://redis:6379/1 --port=5555 --basic_auth=admin:admin

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: dashboard-finance-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - dashboard-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: dashboard-finance-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - dashboard-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: dashboard-finance-nginx
    profiles: ["nginx"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/development/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/development/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - dashboard-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dashboard-network:
    driver: bridge
